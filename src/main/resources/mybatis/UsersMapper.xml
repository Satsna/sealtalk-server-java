<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.rcloud.server.sealtalk.dao.UsersMapper">
  <resultMap id="BaseResultMap" type="com.rcloud.server.sealtalk.domain.Users">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="region" jdbcType="VARCHAR" property="region" />
    <result column="phone" jdbcType="VARCHAR" property="phone" />
    <result column="nickname" jdbcType="VARCHAR" property="nickname" />
    <result column="portraitUri" jdbcType="VARCHAR" property="portraitUri" />
    <result column="passwordHash" jdbcType="CHAR" property="passwordHash" />
    <result column="passwordSalt" jdbcType="CHAR" property="passwordSalt" />
    <result column="rongCloudToken" jdbcType="VARCHAR" property="rongCloudToken" />
    <result column="gender" jdbcType="VARCHAR" property="gender" />
    <result column="stAccount" jdbcType="VARCHAR" property="stAccount" />
    <result column="phoneVerify" jdbcType="INTEGER" property="phoneVerify" />
    <result column="stSearchVerify" jdbcType="INTEGER" property="stSearchVerify" />
    <result column="friVerify" jdbcType="INTEGER" property="friVerify" />
    <result column="groupVerify" jdbcType="INTEGER" property="groupVerify" />
    <result column="pokeStatus" jdbcType="INTEGER" property="pokeStatus" />
    <result column="groupCount" jdbcType="INTEGER" property="groupCount" />
    <result column="timestamp" jdbcType="BIGINT" property="timestamp" />
    <result column="createdAt" jdbcType="TIMESTAMP" property="createdAt" />
    <result column="updatedAt" jdbcType="TIMESTAMP" property="updatedAt" />
    <result column="deletedAt" jdbcType="TIMESTAMP" property="deletedAt" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, region, phone, nickname, portraitUri, passwordHash, passwordSalt, rongCloudToken, 
    gender, stAccount, phoneVerify, stSearchVerify, friVerify, groupVerify, pokeStatus, 
    groupCount, timestamp, createdAt, updatedAt, deletedAt
  </sql>
  <select id="selectByExample" parameterType="com.rcloud.server.sealtalk.domain.UsersExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from users
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    <if test="rows != null">
      <if test="offset != null">
        limit ${offset}, ${rows}
      </if>
      <if test="offset == null">
        limit ${rows}
      </if>
    </if>
  </select>
  <select id="selectByExampleSelective" parameterType="map" resultMap="BaseResultMap">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
      @project https://github.com/itfsw/mybatis-generator-plugin
    -->
    select
    <if test="example.distinct">
      distinct
    </if>
    <choose>
      <when test="selective != null and selective.length > 0">
        <foreach collection="selective" item="column" separator=",">
          ${column.escapedColumnName}
        </foreach>
      </when>
      <otherwise>
        id, region, phone, nickname, portraitUri, passwordHash, passwordSalt, rongCloudToken, 
          gender, stAccount, phoneVerify, stSearchVerify, friVerify, groupVerify, pokeStatus, 
          groupCount, timestamp, createdAt, updatedAt, deletedAt
      </otherwise>
    </choose>
    from users
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
    <if test="example.orderByClause != null">
      order by ${example.orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from users
    where id = #{id,jdbcType=INTEGER}
  </select>
  <select id="selectByPrimaryKeySelective" parameterType="map" resultMap="BaseResultMap">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
      @project https://github.com/itfsw/mybatis-generator-plugin
    -->
    select
    <choose>
      <when test="selective != null and selective.length > 0">
        <foreach collection="selective" item="column" separator=",">
          ${column.escapedColumnName}
        </foreach>
      </when>
      <otherwise>
        id, region, phone, nickname, portraitUri, passwordHash, passwordSalt, rongCloudToken, 
          gender, stAccount, phoneVerify, stSearchVerify, friVerify, groupVerify, pokeStatus, 
          groupCount, timestamp, createdAt, updatedAt, deletedAt
      </otherwise>
    </choose>
    from users
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from users
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.rcloud.server.sealtalk.domain.UsersExample">
    delete from users
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.rcloud.server.sealtalk.domain.Users">
    insert into users (id, region, phone, 
      nickname, portraitUri, passwordHash, 
      passwordSalt, rongCloudToken, gender, 
      stAccount, phoneVerify, stSearchVerify, 
      friVerify, groupVerify, pokeStatus, 
      groupCount, timestamp, createdAt, 
      updatedAt, deletedAt)
    values (#{id,jdbcType=INTEGER}, #{region,jdbcType=VARCHAR}, #{phone,jdbcType=VARCHAR}, 
      #{nickname,jdbcType=VARCHAR}, #{portraitUri,jdbcType=VARCHAR}, #{passwordHash,jdbcType=CHAR}, 
      #{passwordSalt,jdbcType=CHAR}, #{rongCloudToken,jdbcType=VARCHAR}, #{gender,jdbcType=VARCHAR}, 
      #{stAccount,jdbcType=VARCHAR}, #{phoneVerify,jdbcType=INTEGER}, #{stSearchVerify,jdbcType=INTEGER}, 
      #{friVerify,jdbcType=INTEGER}, #{groupVerify,jdbcType=INTEGER}, #{pokeStatus,jdbcType=INTEGER}, 
      #{groupCount,jdbcType=INTEGER}, #{timestamp,jdbcType=BIGINT}, #{createdAt,jdbcType=TIMESTAMP}, 
      #{updatedAt,jdbcType=TIMESTAMP}, #{deletedAt,jdbcType=TIMESTAMP})
  </insert>
  <insert id="insertSelective" parameterType="map">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
      @project https://github.com/itfsw/mybatis-generator-plugin
    -->
    insert into users
    <choose>
      <when test="selective != null and selective.length > 0">
        <foreach close=")" collection="selective" item="column" open="(" separator=",">
          ${column.escapedColumnName}
        </foreach>
      </when>
      <otherwise>
        <trim prefix="(" suffix=")" suffixOverrides=",">
          <if test="record.id != null">
            id,
          </if>
          <if test="record.region != null">
            region,
          </if>
          <if test="record.phone != null">
            phone,
          </if>
          <if test="record.nickname != null">
            nickname,
          </if>
          <if test="record.portraitUri != null">
            portraitUri,
          </if>
          <if test="record.passwordHash != null">
            passwordHash,
          </if>
          <if test="record.passwordSalt != null">
            passwordSalt,
          </if>
          <if test="record.rongCloudToken != null">
            rongCloudToken,
          </if>
          <if test="record.gender != null">
            gender,
          </if>
          <if test="record.stAccount != null">
            stAccount,
          </if>
          <if test="record.phoneVerify != null">
            phoneVerify,
          </if>
          <if test="record.stSearchVerify != null">
            stSearchVerify,
          </if>
          <if test="record.friVerify != null">
            friVerify,
          </if>
          <if test="record.groupVerify != null">
            groupVerify,
          </if>
          <if test="record.pokeStatus != null">
            pokeStatus,
          </if>
          <if test="record.groupCount != null">
            groupCount,
          </if>
          <if test="record.timestamp != null">
            timestamp,
          </if>
          <if test="record.createdAt != null">
            createdAt,
          </if>
          <if test="record.updatedAt != null">
            updatedAt,
          </if>
          <if test="record.deletedAt != null">
            deletedAt,
          </if>
        </trim>
        <trim prefix="(" suffix=")" suffixOverrides="," />
      </otherwise>
    </choose>
    values
    <choose>
      <when test="selective != null and selective.length > 0">
        <foreach close=")" collection="selective" item="column" open="(" separator=",">
          #{record.${column.javaProperty},jdbcType=${column.jdbcType}}
        </foreach>
      </when>
      <otherwise>
        <trim prefix="(" suffix=")" suffixOverrides=",">
          <if test="record.id != null">
            #{record.id,jdbcType=INTEGER},
          </if>
          <if test="record.region != null">
            #{record.region,jdbcType=VARCHAR},
          </if>
          <if test="record.phone != null">
            #{record.phone,jdbcType=VARCHAR},
          </if>
          <if test="record.nickname != null">
            #{record.nickname,jdbcType=VARCHAR},
          </if>
          <if test="record.portraitUri != null">
            #{record.portraitUri,jdbcType=VARCHAR},
          </if>
          <if test="record.passwordHash != null">
            #{record.passwordHash,jdbcType=CHAR},
          </if>
          <if test="record.passwordSalt != null">
            #{record.passwordSalt,jdbcType=CHAR},
          </if>
          <if test="record.rongCloudToken != null">
            #{record.rongCloudToken,jdbcType=VARCHAR},
          </if>
          <if test="record.gender != null">
            #{record.gender,jdbcType=VARCHAR},
          </if>
          <if test="record.stAccount != null">
            #{record.stAccount,jdbcType=VARCHAR},
          </if>
          <if test="record.phoneVerify != null">
            #{record.phoneVerify,jdbcType=INTEGER},
          </if>
          <if test="record.stSearchVerify != null">
            #{record.stSearchVerify,jdbcType=INTEGER},
          </if>
          <if test="record.friVerify != null">
            #{record.friVerify,jdbcType=INTEGER},
          </if>
          <if test="record.groupVerify != null">
            #{record.groupVerify,jdbcType=INTEGER},
          </if>
          <if test="record.pokeStatus != null">
            #{record.pokeStatus,jdbcType=INTEGER},
          </if>
          <if test="record.groupCount != null">
            #{record.groupCount,jdbcType=INTEGER},
          </if>
          <if test="record.timestamp != null">
            #{record.timestamp,jdbcType=BIGINT},
          </if>
          <if test="record.createdAt != null">
            #{record.createdAt,jdbcType=TIMESTAMP},
          </if>
          <if test="record.updatedAt != null">
            #{record.updatedAt,jdbcType=TIMESTAMP},
          </if>
          <if test="record.deletedAt != null">
            #{record.deletedAt,jdbcType=TIMESTAMP},
          </if>
        </trim>
      </otherwise>
    </choose>
  </insert>
  <select id="countByExample" parameterType="com.rcloud.server.sealtalk.domain.UsersExample" resultType="java.lang.Long">
    select count(*) from users
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
      @project https://github.com/itfsw/mybatis-generator-plugin
    -->
    update users
    SET
    <choose>
      <when test="selective != null and selective.length > 0">
        <foreach collection="selective" item="column" separator=",">
          ${column.escapedColumnName} = #{record.${column.javaProperty},jdbcType=${column.jdbcType}}
        </foreach>
      </when>
      <otherwise>
        <trim suffixOverrides=",">
          <if test="record.id != null">
            id = #{record.id,jdbcType=INTEGER},
          </if>
          <if test="record.region != null">
            region = #{record.region,jdbcType=VARCHAR},
          </if>
          <if test="record.phone != null">
            phone = #{record.phone,jdbcType=VARCHAR},
          </if>
          <if test="record.nickname != null">
            nickname = #{record.nickname,jdbcType=VARCHAR},
          </if>
          <if test="record.portraitUri != null">
            portraitUri = #{record.portraitUri,jdbcType=VARCHAR},
          </if>
          <if test="record.passwordHash != null">
            passwordHash = #{record.passwordHash,jdbcType=CHAR},
          </if>
          <if test="record.passwordSalt != null">
            passwordSalt = #{record.passwordSalt,jdbcType=CHAR},
          </if>
          <if test="record.rongCloudToken != null">
            rongCloudToken = #{record.rongCloudToken,jdbcType=VARCHAR},
          </if>
          <if test="record.gender != null">
            gender = #{record.gender,jdbcType=VARCHAR},
          </if>
          <if test="record.stAccount != null">
            stAccount = #{record.stAccount,jdbcType=VARCHAR},
          </if>
          <if test="record.phoneVerify != null">
            phoneVerify = #{record.phoneVerify,jdbcType=INTEGER},
          </if>
          <if test="record.stSearchVerify != null">
            stSearchVerify = #{record.stSearchVerify,jdbcType=INTEGER},
          </if>
          <if test="record.friVerify != null">
            friVerify = #{record.friVerify,jdbcType=INTEGER},
          </if>
          <if test="record.groupVerify != null">
            groupVerify = #{record.groupVerify,jdbcType=INTEGER},
          </if>
          <if test="record.pokeStatus != null">
            pokeStatus = #{record.pokeStatus,jdbcType=INTEGER},
          </if>
          <if test="record.groupCount != null">
            groupCount = #{record.groupCount,jdbcType=INTEGER},
          </if>
          <if test="record.timestamp != null">
            timestamp = #{record.timestamp,jdbcType=BIGINT},
          </if>
          <if test="record.createdAt != null">
            createdAt = #{record.createdAt,jdbcType=TIMESTAMP},
          </if>
          <if test="record.updatedAt != null">
            updatedAt = #{record.updatedAt,jdbcType=TIMESTAMP},
          </if>
          <if test="record.deletedAt != null">
            deletedAt = #{record.deletedAt,jdbcType=TIMESTAMP},
          </if>
        </trim>
      </otherwise>
    </choose>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update users
    set id = #{record.id,jdbcType=INTEGER},
      region = #{record.region,jdbcType=VARCHAR},
      phone = #{record.phone,jdbcType=VARCHAR},
      nickname = #{record.nickname,jdbcType=VARCHAR},
      portraitUri = #{record.portraitUri,jdbcType=VARCHAR},
      passwordHash = #{record.passwordHash,jdbcType=CHAR},
      passwordSalt = #{record.passwordSalt,jdbcType=CHAR},
      rongCloudToken = #{record.rongCloudToken,jdbcType=VARCHAR},
      gender = #{record.gender,jdbcType=VARCHAR},
      stAccount = #{record.stAccount,jdbcType=VARCHAR},
      phoneVerify = #{record.phoneVerify,jdbcType=INTEGER},
      stSearchVerify = #{record.stSearchVerify,jdbcType=INTEGER},
      friVerify = #{record.friVerify,jdbcType=INTEGER},
      groupVerify = #{record.groupVerify,jdbcType=INTEGER},
      pokeStatus = #{record.pokeStatus,jdbcType=INTEGER},
      groupCount = #{record.groupCount,jdbcType=INTEGER},
      timestamp = #{record.timestamp,jdbcType=BIGINT},
      createdAt = #{record.createdAt,jdbcType=TIMESTAMP},
      updatedAt = #{record.updatedAt,jdbcType=TIMESTAMP},
      deletedAt = #{record.deletedAt,jdbcType=TIMESTAMP}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="map">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
      @project https://github.com/itfsw/mybatis-generator-plugin
    -->
    update users
    SET
    <choose>
      <when test="selective != null and selective.length > 0">
        <foreach collection="selective" item="column" separator=",">
          ${column.escapedColumnName} = #{record.${column.javaProperty},jdbcType=${column.jdbcType}}
        </foreach>
      </when>
      <otherwise>
        <trim suffixOverrides=",">
          <if test="record.region != null">
            region = #{record.region,jdbcType=VARCHAR},
          </if>
          <if test="record.phone != null">
            phone = #{record.phone,jdbcType=VARCHAR},
          </if>
          <if test="record.nickname != null">
            nickname = #{record.nickname,jdbcType=VARCHAR},
          </if>
          <if test="record.portraitUri != null">
            portraitUri = #{record.portraitUri,jdbcType=VARCHAR},
          </if>
          <if test="record.passwordHash != null">
            passwordHash = #{record.passwordHash,jdbcType=CHAR},
          </if>
          <if test="record.passwordSalt != null">
            passwordSalt = #{record.passwordSalt,jdbcType=CHAR},
          </if>
          <if test="record.rongCloudToken != null">
            rongCloudToken = #{record.rongCloudToken,jdbcType=VARCHAR},
          </if>
          <if test="record.gender != null">
            gender = #{record.gender,jdbcType=VARCHAR},
          </if>
          <if test="record.stAccount != null">
            stAccount = #{record.stAccount,jdbcType=VARCHAR},
          </if>
          <if test="record.phoneVerify != null">
            phoneVerify = #{record.phoneVerify,jdbcType=INTEGER},
          </if>
          <if test="record.stSearchVerify != null">
            stSearchVerify = #{record.stSearchVerify,jdbcType=INTEGER},
          </if>
          <if test="record.friVerify != null">
            friVerify = #{record.friVerify,jdbcType=INTEGER},
          </if>
          <if test="record.groupVerify != null">
            groupVerify = #{record.groupVerify,jdbcType=INTEGER},
          </if>
          <if test="record.pokeStatus != null">
            pokeStatus = #{record.pokeStatus,jdbcType=INTEGER},
          </if>
          <if test="record.groupCount != null">
            groupCount = #{record.groupCount,jdbcType=INTEGER},
          </if>
          <if test="record.timestamp != null">
            timestamp = #{record.timestamp,jdbcType=BIGINT},
          </if>
          <if test="record.createdAt != null">
            createdAt = #{record.createdAt,jdbcType=TIMESTAMP},
          </if>
          <if test="record.updatedAt != null">
            updatedAt = #{record.updatedAt,jdbcType=TIMESTAMP},
          </if>
          <if test="record.deletedAt != null">
            deletedAt = #{record.deletedAt,jdbcType=TIMESTAMP},
          </if>
        </trim>
      </otherwise>
    </choose>
    where id = #{record.id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.rcloud.server.sealtalk.domain.Users">
    update users
    set region = #{region,jdbcType=VARCHAR},
      phone = #{phone,jdbcType=VARCHAR},
      nickname = #{nickname,jdbcType=VARCHAR},
      portraitUri = #{portraitUri,jdbcType=VARCHAR},
      passwordHash = #{passwordHash,jdbcType=CHAR},
      passwordSalt = #{passwordSalt,jdbcType=CHAR},
      rongCloudToken = #{rongCloudToken,jdbcType=VARCHAR},
      gender = #{gender,jdbcType=VARCHAR},
      stAccount = #{stAccount,jdbcType=VARCHAR},
      phoneVerify = #{phoneVerify,jdbcType=INTEGER},
      stSearchVerify = #{stSearchVerify,jdbcType=INTEGER},
      friVerify = #{friVerify,jdbcType=INTEGER},
      groupVerify = #{groupVerify,jdbcType=INTEGER},
      pokeStatus = #{pokeStatus,jdbcType=INTEGER},
      groupCount = #{groupCount,jdbcType=INTEGER},
      timestamp = #{timestamp,jdbcType=BIGINT},
      createdAt = #{createdAt,jdbcType=TIMESTAMP},
      updatedAt = #{updatedAt,jdbcType=TIMESTAMP},
      deletedAt = #{deletedAt,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <select id="selectOneByExample" parameterType="com.rcloud.server.sealtalk.domain.UsersExample" resultMap="BaseResultMap">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
      @project https://github.com/itfsw/mybatis-generator-plugin
    -->
    select
    <include refid="Base_Column_List" />
    from users
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    limit 1
  </select>
  <select id="selectOneByExampleSelective" parameterType="map" resultMap="BaseResultMap">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
      @project https://github.com/itfsw/mybatis-generator-plugin
    -->
    select
    <choose>
      <when test="selective != null and selective.length > 0">
        <foreach collection="selective" item="column" separator=",">
          ${column.escapedColumnName}
        </foreach>
      </when>
      <otherwise>
        id, region, phone, nickname, portraitUri, passwordHash, passwordSalt, rongCloudToken, 
          gender, stAccount, phoneVerify, stSearchVerify, friVerify, groupVerify, pokeStatus, 
          groupCount, timestamp, createdAt, updatedAt, deletedAt
      </otherwise>
    </choose>
    from users
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
    <if test="example.orderByClause != null">
      order by ${example.orderByClause}
    </if>
    limit 1
  </select>
  <insert id="batchInsert" parameterType="map">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
      @project https://github.com/itfsw/mybatis-generator-plugin
    -->
    insert into users
    (id, region, phone, nickname, portraitUri, passwordHash, passwordSalt, rongCloudToken, 
      gender, stAccount, phoneVerify, stSearchVerify, friVerify, groupVerify, pokeStatus, 
      groupCount, timestamp, createdAt, updatedAt, deletedAt)
    values
    <foreach collection="list" item="item" separator=",">
      (#{item.id,jdbcType=INTEGER}, #{item.region,jdbcType=VARCHAR}, #{item.phone,jdbcType=VARCHAR}, 
        #{item.nickname,jdbcType=VARCHAR}, #{item.portraitUri,jdbcType=VARCHAR}, #{item.passwordHash,jdbcType=CHAR}, 
        #{item.passwordSalt,jdbcType=CHAR}, #{item.rongCloudToken,jdbcType=VARCHAR}, #{item.gender,jdbcType=VARCHAR}, 
        #{item.stAccount,jdbcType=VARCHAR}, #{item.phoneVerify,jdbcType=INTEGER}, #{item.stSearchVerify,jdbcType=INTEGER}, 
        #{item.friVerify,jdbcType=INTEGER}, #{item.groupVerify,jdbcType=INTEGER}, #{item.pokeStatus,jdbcType=INTEGER}, 
        #{item.groupCount,jdbcType=INTEGER}, #{item.timestamp,jdbcType=BIGINT}, #{item.createdAt,jdbcType=TIMESTAMP}, 
        #{item.updatedAt,jdbcType=TIMESTAMP}, #{item.deletedAt,jdbcType=TIMESTAMP})
    </foreach>
  </insert>
  <insert id="batchInsertSelective" parameterType="map">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
      @project https://github.com/itfsw/mybatis-generator-plugin
    -->
    insert into users (
    <foreach collection="selective" item="column" separator=",">
      ${column.escapedColumnName}
    </foreach>
    )
    values
    <foreach collection="list" item="item" separator=",">
      (
      <foreach collection="selective" item="column" separator=",">
        <if test="'id'.toString() == column.value">
          #{item.id,jdbcType=INTEGER}
        </if>
        <if test="'region'.toString() == column.value">
          #{item.region,jdbcType=VARCHAR}
        </if>
        <if test="'phone'.toString() == column.value">
          #{item.phone,jdbcType=VARCHAR}
        </if>
        <if test="'nickname'.toString() == column.value">
          #{item.nickname,jdbcType=VARCHAR}
        </if>
        <if test="'portraitUri'.toString() == column.value">
          #{item.portraitUri,jdbcType=VARCHAR}
        </if>
        <if test="'passwordHash'.toString() == column.value">
          #{item.passwordHash,jdbcType=CHAR}
        </if>
        <if test="'passwordSalt'.toString() == column.value">
          #{item.passwordSalt,jdbcType=CHAR}
        </if>
        <if test="'rongCloudToken'.toString() == column.value">
          #{item.rongCloudToken,jdbcType=VARCHAR}
        </if>
        <if test="'gender'.toString() == column.value">
          #{item.gender,jdbcType=VARCHAR}
        </if>
        <if test="'stAccount'.toString() == column.value">
          #{item.stAccount,jdbcType=VARCHAR}
        </if>
        <if test="'phoneVerify'.toString() == column.value">
          #{item.phoneVerify,jdbcType=INTEGER}
        </if>
        <if test="'stSearchVerify'.toString() == column.value">
          #{item.stSearchVerify,jdbcType=INTEGER}
        </if>
        <if test="'friVerify'.toString() == column.value">
          #{item.friVerify,jdbcType=INTEGER}
        </if>
        <if test="'groupVerify'.toString() == column.value">
          #{item.groupVerify,jdbcType=INTEGER}
        </if>
        <if test="'pokeStatus'.toString() == column.value">
          #{item.pokeStatus,jdbcType=INTEGER}
        </if>
        <if test="'groupCount'.toString() == column.value">
          #{item.groupCount,jdbcType=INTEGER}
        </if>
        <if test="'timestamp'.toString() == column.value">
          #{item.timestamp,jdbcType=BIGINT}
        </if>
        <if test="'createdAt'.toString() == column.value">
          #{item.createdAt,jdbcType=TIMESTAMP}
        </if>
        <if test="'updatedAt'.toString() == column.value">
          #{item.updatedAt,jdbcType=TIMESTAMP}
        </if>
        <if test="'deletedAt'.toString() == column.value">
          #{item.deletedAt,jdbcType=TIMESTAMP}
        </if>
      </foreach>
      )
    </foreach>
  </insert>
  <insert id="upsertSelective" parameterType="map">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
      @project https://github.com/itfsw/mybatis-generator-plugin
    -->
    insert into users
    <choose>
      <when test="selective != null and selective.length > 0">
        <foreach close=")" collection="selective" item="column" open="(" separator=",">
          ${column.escapedColumnName}
        </foreach>
      </when>
      <otherwise>
        <trim prefix="(" suffix=")" suffixOverrides=",">
          <if test="record.id != null">
            id,
          </if>
          <if test="record.region != null">
            region,
          </if>
          <if test="record.phone != null">
            phone,
          </if>
          <if test="record.nickname != null">
            nickname,
          </if>
          <if test="record.portraitUri != null">
            portraitUri,
          </if>
          <if test="record.passwordHash != null">
            passwordHash,
          </if>
          <if test="record.passwordSalt != null">
            passwordSalt,
          </if>
          <if test="record.rongCloudToken != null">
            rongCloudToken,
          </if>
          <if test="record.gender != null">
            gender,
          </if>
          <if test="record.stAccount != null">
            stAccount,
          </if>
          <if test="record.phoneVerify != null">
            phoneVerify,
          </if>
          <if test="record.stSearchVerify != null">
            stSearchVerify,
          </if>
          <if test="record.friVerify != null">
            friVerify,
          </if>
          <if test="record.groupVerify != null">
            groupVerify,
          </if>
          <if test="record.pokeStatus != null">
            pokeStatus,
          </if>
          <if test="record.groupCount != null">
            groupCount,
          </if>
          <if test="record.timestamp != null">
            timestamp,
          </if>
          <if test="record.createdAt != null">
            createdAt,
          </if>
          <if test="record.updatedAt != null">
            updatedAt,
          </if>
          <if test="record.deletedAt != null">
            deletedAt,
          </if>
        </trim>
        <trim prefix="(" suffix=")" suffixOverrides="," />
      </otherwise>
    </choose>
    values
    <choose>
      <when test="selective != null and selective.length > 0">
        <foreach close=")" collection="selective" item="column" open="(" separator=",">
          #{record.${column.javaProperty},jdbcType=${column.jdbcType}}
        </foreach>
      </when>
      <otherwise>
        <trim prefix="(" suffix=")" suffixOverrides=",">
          <if test="record.id != null">
            #{record.id,jdbcType=INTEGER},
          </if>
          <if test="record.region != null">
            #{record.region,jdbcType=VARCHAR},
          </if>
          <if test="record.phone != null">
            #{record.phone,jdbcType=VARCHAR},
          </if>
          <if test="record.nickname != null">
            #{record.nickname,jdbcType=VARCHAR},
          </if>
          <if test="record.portraitUri != null">
            #{record.portraitUri,jdbcType=VARCHAR},
          </if>
          <if test="record.passwordHash != null">
            #{record.passwordHash,jdbcType=CHAR},
          </if>
          <if test="record.passwordSalt != null">
            #{record.passwordSalt,jdbcType=CHAR},
          </if>
          <if test="record.rongCloudToken != null">
            #{record.rongCloudToken,jdbcType=VARCHAR},
          </if>
          <if test="record.gender != null">
            #{record.gender,jdbcType=VARCHAR},
          </if>
          <if test="record.stAccount != null">
            #{record.stAccount,jdbcType=VARCHAR},
          </if>
          <if test="record.phoneVerify != null">
            #{record.phoneVerify,jdbcType=INTEGER},
          </if>
          <if test="record.stSearchVerify != null">
            #{record.stSearchVerify,jdbcType=INTEGER},
          </if>
          <if test="record.friVerify != null">
            #{record.friVerify,jdbcType=INTEGER},
          </if>
          <if test="record.groupVerify != null">
            #{record.groupVerify,jdbcType=INTEGER},
          </if>
          <if test="record.pokeStatus != null">
            #{record.pokeStatus,jdbcType=INTEGER},
          </if>
          <if test="record.groupCount != null">
            #{record.groupCount,jdbcType=INTEGER},
          </if>
          <if test="record.timestamp != null">
            #{record.timestamp,jdbcType=BIGINT},
          </if>
          <if test="record.createdAt != null">
            #{record.createdAt,jdbcType=TIMESTAMP},
          </if>
          <if test="record.updatedAt != null">
            #{record.updatedAt,jdbcType=TIMESTAMP},
          </if>
          <if test="record.deletedAt != null">
            #{record.deletedAt,jdbcType=TIMESTAMP},
          </if>
        </trim>
      </otherwise>
    </choose>
    on duplicate key update 
    <choose>
      <when test="selective != null and selective.length > 0">
        <foreach collection="selective" item="column" separator=",">
          ${column.escapedColumnName} = #{record.${column.javaProperty},jdbcType=${column.jdbcType}}
        </foreach>
      </when>
      <otherwise>
        <trim suffixOverrides=",">
          <if test="record.id != null">
            id = #{record.id,jdbcType=INTEGER},
          </if>
          <if test="record.region != null">
            region = #{record.region,jdbcType=VARCHAR},
          </if>
          <if test="record.phone != null">
            phone = #{record.phone,jdbcType=VARCHAR},
          </if>
          <if test="record.nickname != null">
            nickname = #{record.nickname,jdbcType=VARCHAR},
          </if>
          <if test="record.portraitUri != null">
            portraitUri = #{record.portraitUri,jdbcType=VARCHAR},
          </if>
          <if test="record.passwordHash != null">
            passwordHash = #{record.passwordHash,jdbcType=CHAR},
          </if>
          <if test="record.passwordSalt != null">
            passwordSalt = #{record.passwordSalt,jdbcType=CHAR},
          </if>
          <if test="record.rongCloudToken != null">
            rongCloudToken = #{record.rongCloudToken,jdbcType=VARCHAR},
          </if>
          <if test="record.gender != null">
            gender = #{record.gender,jdbcType=VARCHAR},
          </if>
          <if test="record.stAccount != null">
            stAccount = #{record.stAccount,jdbcType=VARCHAR},
          </if>
          <if test="record.phoneVerify != null">
            phoneVerify = #{record.phoneVerify,jdbcType=INTEGER},
          </if>
          <if test="record.stSearchVerify != null">
            stSearchVerify = #{record.stSearchVerify,jdbcType=INTEGER},
          </if>
          <if test="record.friVerify != null">
            friVerify = #{record.friVerify,jdbcType=INTEGER},
          </if>
          <if test="record.groupVerify != null">
            groupVerify = #{record.groupVerify,jdbcType=INTEGER},
          </if>
          <if test="record.pokeStatus != null">
            pokeStatus = #{record.pokeStatus,jdbcType=INTEGER},
          </if>
          <if test="record.groupCount != null">
            groupCount = #{record.groupCount,jdbcType=INTEGER},
          </if>
          <if test="record.timestamp != null">
            timestamp = #{record.timestamp,jdbcType=BIGINT},
          </if>
          <if test="record.createdAt != null">
            createdAt = #{record.createdAt,jdbcType=TIMESTAMP},
          </if>
          <if test="record.updatedAt != null">
            updatedAt = #{record.updatedAt,jdbcType=TIMESTAMP},
          </if>
          <if test="record.deletedAt != null">
            deletedAt = #{record.deletedAt,jdbcType=TIMESTAMP},
          </if>
        </trim>
      </otherwise>
    </choose>
  </insert>
  <update id="upsertByExampleSelective" parameterType="map">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
      @project https://github.com/itfsw/mybatis-generator-plugin
    -->
    update users
    set
    <choose>
      <when test="selective != null and selective.length > 0">
        <foreach collection="selective" item="column" separator=",">
          ${column.escapedColumnName} = #{record.${column.javaProperty},jdbcType=${column.jdbcType}}
        </foreach>
      </when>
      <otherwise>
        <trim suffixOverrides=",">
          <if test="record.id != null">
            id = #{record.id,jdbcType=INTEGER},
          </if>
          <if test="record.region != null">
            region = #{record.region,jdbcType=VARCHAR},
          </if>
          <if test="record.phone != null">
            phone = #{record.phone,jdbcType=VARCHAR},
          </if>
          <if test="record.nickname != null">
            nickname = #{record.nickname,jdbcType=VARCHAR},
          </if>
          <if test="record.portraitUri != null">
            portraitUri = #{record.portraitUri,jdbcType=VARCHAR},
          </if>
          <if test="record.passwordHash != null">
            passwordHash = #{record.passwordHash,jdbcType=CHAR},
          </if>
          <if test="record.passwordSalt != null">
            passwordSalt = #{record.passwordSalt,jdbcType=CHAR},
          </if>
          <if test="record.rongCloudToken != null">
            rongCloudToken = #{record.rongCloudToken,jdbcType=VARCHAR},
          </if>
          <if test="record.gender != null">
            gender = #{record.gender,jdbcType=VARCHAR},
          </if>
          <if test="record.stAccount != null">
            stAccount = #{record.stAccount,jdbcType=VARCHAR},
          </if>
          <if test="record.phoneVerify != null">
            phoneVerify = #{record.phoneVerify,jdbcType=INTEGER},
          </if>
          <if test="record.stSearchVerify != null">
            stSearchVerify = #{record.stSearchVerify,jdbcType=INTEGER},
          </if>
          <if test="record.friVerify != null">
            friVerify = #{record.friVerify,jdbcType=INTEGER},
          </if>
          <if test="record.groupVerify != null">
            groupVerify = #{record.groupVerify,jdbcType=INTEGER},
          </if>
          <if test="record.pokeStatus != null">
            pokeStatus = #{record.pokeStatus,jdbcType=INTEGER},
          </if>
          <if test="record.groupCount != null">
            groupCount = #{record.groupCount,jdbcType=INTEGER},
          </if>
          <if test="record.timestamp != null">
            timestamp = #{record.timestamp,jdbcType=BIGINT},
          </if>
          <if test="record.createdAt != null">
            createdAt = #{record.createdAt,jdbcType=TIMESTAMP},
          </if>
          <if test="record.updatedAt != null">
            updatedAt = #{record.updatedAt,jdbcType=TIMESTAMP},
          </if>
          <if test="record.deletedAt != null">
            deletedAt = #{record.deletedAt,jdbcType=TIMESTAMP},
          </if>
        </trim>
      </otherwise>
    </choose>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
    ;
    insert into users
    <choose>
      <when test="selective != null and selective.length > 0">
        <foreach close=")" collection="selective" item="column" open="(" separator=",">
          ${column.escapedColumnName}
        </foreach>
      </when>
      <otherwise>
        <trim prefix="(" suffix=")" suffixOverrides=",">
          <if test="record.id != null">
            id,
          </if>
          <if test="record.region != null">
            region,
          </if>
          <if test="record.phone != null">
            phone,
          </if>
          <if test="record.nickname != null">
            nickname,
          </if>
          <if test="record.portraitUri != null">
            portraitUri,
          </if>
          <if test="record.passwordHash != null">
            passwordHash,
          </if>
          <if test="record.passwordSalt != null">
            passwordSalt,
          </if>
          <if test="record.rongCloudToken != null">
            rongCloudToken,
          </if>
          <if test="record.gender != null">
            gender,
          </if>
          <if test="record.stAccount != null">
            stAccount,
          </if>
          <if test="record.phoneVerify != null">
            phoneVerify,
          </if>
          <if test="record.stSearchVerify != null">
            stSearchVerify,
          </if>
          <if test="record.friVerify != null">
            friVerify,
          </if>
          <if test="record.groupVerify != null">
            groupVerify,
          </if>
          <if test="record.pokeStatus != null">
            pokeStatus,
          </if>
          <if test="record.groupCount != null">
            groupCount,
          </if>
          <if test="record.timestamp != null">
            timestamp,
          </if>
          <if test="record.createdAt != null">
            createdAt,
          </if>
          <if test="record.updatedAt != null">
            updatedAt,
          </if>
          <if test="record.deletedAt != null">
            deletedAt,
          </if>
        </trim>
        <trim prefix="(" suffix=")" suffixOverrides="," />
      </otherwise>
    </choose>
    select
    <choose>
      <when test="selective != null and selective.length > 0">
        <foreach collection="selective" item="column" separator=",">
          #{record.${column.javaProperty},jdbcType=${column.jdbcType}}
        </foreach>
      </when>
      <otherwise>
        <trim suffixOverrides=",">
          <if test="record.id != null">
            #{record.id,jdbcType=INTEGER},
          </if>
          <if test="record.region != null">
            #{record.region,jdbcType=VARCHAR},
          </if>
          <if test="record.phone != null">
            #{record.phone,jdbcType=VARCHAR},
          </if>
          <if test="record.nickname != null">
            #{record.nickname,jdbcType=VARCHAR},
          </if>
          <if test="record.portraitUri != null">
            #{record.portraitUri,jdbcType=VARCHAR},
          </if>
          <if test="record.passwordHash != null">
            #{record.passwordHash,jdbcType=CHAR},
          </if>
          <if test="record.passwordSalt != null">
            #{record.passwordSalt,jdbcType=CHAR},
          </if>
          <if test="record.rongCloudToken != null">
            #{record.rongCloudToken,jdbcType=VARCHAR},
          </if>
          <if test="record.gender != null">
            #{record.gender,jdbcType=VARCHAR},
          </if>
          <if test="record.stAccount != null">
            #{record.stAccount,jdbcType=VARCHAR},
          </if>
          <if test="record.phoneVerify != null">
            #{record.phoneVerify,jdbcType=INTEGER},
          </if>
          <if test="record.stSearchVerify != null">
            #{record.stSearchVerify,jdbcType=INTEGER},
          </if>
          <if test="record.friVerify != null">
            #{record.friVerify,jdbcType=INTEGER},
          </if>
          <if test="record.groupVerify != null">
            #{record.groupVerify,jdbcType=INTEGER},
          </if>
          <if test="record.pokeStatus != null">
            #{record.pokeStatus,jdbcType=INTEGER},
          </if>
          <if test="record.groupCount != null">
            #{record.groupCount,jdbcType=INTEGER},
          </if>
          <if test="record.timestamp != null">
            #{record.timestamp,jdbcType=BIGINT},
          </if>
          <if test="record.createdAt != null">
            #{record.createdAt,jdbcType=TIMESTAMP},
          </if>
          <if test="record.updatedAt != null">
            #{record.updatedAt,jdbcType=TIMESTAMP},
          </if>
          <if test="record.deletedAt != null">
            #{record.deletedAt,jdbcType=TIMESTAMP},
          </if>
        </trim>
      </otherwise>
    </choose>
    from dual where not exists
    (
    select 1 from users
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
    )
  </update>
  <insert id="upsert" parameterType="com.rcloud.server.sealtalk.domain.Users">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
      @project https://github.com/itfsw/mybatis-generator-plugin
    -->
    insert into users
    (id, region, phone, nickname, portraitUri, passwordHash, passwordSalt, rongCloudToken, 
      gender, stAccount, phoneVerify, stSearchVerify, friVerify, groupVerify, pokeStatus, 
      groupCount, timestamp, createdAt, updatedAt, deletedAt)
    values
    (#{id,jdbcType=INTEGER}, #{region,jdbcType=VARCHAR}, #{phone,jdbcType=VARCHAR}, #{nickname,jdbcType=VARCHAR}, 
      #{portraitUri,jdbcType=VARCHAR}, #{passwordHash,jdbcType=CHAR}, #{passwordSalt,jdbcType=CHAR}, 
      #{rongCloudToken,jdbcType=VARCHAR}, #{gender,jdbcType=VARCHAR}, #{stAccount,jdbcType=VARCHAR}, 
      #{phoneVerify,jdbcType=INTEGER}, #{stSearchVerify,jdbcType=INTEGER}, #{friVerify,jdbcType=INTEGER}, 
      #{groupVerify,jdbcType=INTEGER}, #{pokeStatus,jdbcType=INTEGER}, #{groupCount,jdbcType=INTEGER}, 
      #{timestamp,jdbcType=BIGINT}, #{createdAt,jdbcType=TIMESTAMP}, #{updatedAt,jdbcType=TIMESTAMP}, 
      #{deletedAt,jdbcType=TIMESTAMP})
    on duplicate key update 
    id = #{id,jdbcType=INTEGER}, 
    region = #{region,jdbcType=VARCHAR}, 
    phone = #{phone,jdbcType=VARCHAR}, 
    nickname = #{nickname,jdbcType=VARCHAR}, 
    portraitUri = #{portraitUri,jdbcType=VARCHAR}, 
    passwordHash = #{passwordHash,jdbcType=CHAR}, 
    passwordSalt = #{passwordSalt,jdbcType=CHAR}, 
    rongCloudToken = #{rongCloudToken,jdbcType=VARCHAR}, 
    gender = #{gender,jdbcType=VARCHAR}, 
    stAccount = #{stAccount,jdbcType=VARCHAR}, 
    phoneVerify = #{phoneVerify,jdbcType=INTEGER}, 
    stSearchVerify = #{stSearchVerify,jdbcType=INTEGER}, 
    friVerify = #{friVerify,jdbcType=INTEGER}, 
    groupVerify = #{groupVerify,jdbcType=INTEGER}, 
    pokeStatus = #{pokeStatus,jdbcType=INTEGER}, 
    groupCount = #{groupCount,jdbcType=INTEGER}, 
    timestamp = #{timestamp,jdbcType=BIGINT}, 
    createdAt = #{createdAt,jdbcType=TIMESTAMP}, 
    updatedAt = #{updatedAt,jdbcType=TIMESTAMP}, 
    deletedAt = #{deletedAt,jdbcType=TIMESTAMP}
  </insert>
  <update id="upsertByExample" parameterType="map">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
      @project https://github.com/itfsw/mybatis-generator-plugin
    -->
    update users
    set
    id = #{record.id,jdbcType=INTEGER}, 
    region = #{record.region,jdbcType=VARCHAR}, 
    phone = #{record.phone,jdbcType=VARCHAR}, 
    nickname = #{record.nickname,jdbcType=VARCHAR}, 
    portraitUri = #{record.portraitUri,jdbcType=VARCHAR}, 
    passwordHash = #{record.passwordHash,jdbcType=CHAR}, 
    passwordSalt = #{record.passwordSalt,jdbcType=CHAR}, 
    rongCloudToken = #{record.rongCloudToken,jdbcType=VARCHAR}, 
    gender = #{record.gender,jdbcType=VARCHAR}, 
    stAccount = #{record.stAccount,jdbcType=VARCHAR}, 
    phoneVerify = #{record.phoneVerify,jdbcType=INTEGER}, 
    stSearchVerify = #{record.stSearchVerify,jdbcType=INTEGER}, 
    friVerify = #{record.friVerify,jdbcType=INTEGER}, 
    groupVerify = #{record.groupVerify,jdbcType=INTEGER}, 
    pokeStatus = #{record.pokeStatus,jdbcType=INTEGER}, 
    groupCount = #{record.groupCount,jdbcType=INTEGER}, 
    timestamp = #{record.timestamp,jdbcType=BIGINT}, 
    createdAt = #{record.createdAt,jdbcType=TIMESTAMP}, 
    updatedAt = #{record.updatedAt,jdbcType=TIMESTAMP}, 
    deletedAt = #{record.deletedAt,jdbcType=TIMESTAMP}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
    ;
    insert into users
    (id, region, phone, nickname, portraitUri, passwordHash, passwordSalt, rongCloudToken, 
      gender, stAccount, phoneVerify, stSearchVerify, friVerify, groupVerify, pokeStatus, 
      groupCount, timestamp, createdAt, updatedAt, deletedAt)
    select
    #{record.id,jdbcType=INTEGER}, #{record.region,jdbcType=VARCHAR}, #{record.phone,jdbcType=VARCHAR}, 
      #{record.nickname,jdbcType=VARCHAR}, #{record.portraitUri,jdbcType=VARCHAR}, #{record.passwordHash,jdbcType=CHAR}, 
      #{record.passwordSalt,jdbcType=CHAR}, #{record.rongCloudToken,jdbcType=VARCHAR}, 
      #{record.gender,jdbcType=VARCHAR}, #{record.stAccount,jdbcType=VARCHAR}, #{record.phoneVerify,jdbcType=INTEGER}, 
      #{record.stSearchVerify,jdbcType=INTEGER}, #{record.friVerify,jdbcType=INTEGER}, 
      #{record.groupVerify,jdbcType=INTEGER}, #{record.pokeStatus,jdbcType=INTEGER}, 
      #{record.groupCount,jdbcType=INTEGER}, #{record.timestamp,jdbcType=BIGINT}, #{record.createdAt,jdbcType=TIMESTAMP}, 
      #{record.updatedAt,jdbcType=TIMESTAMP}, #{record.deletedAt,jdbcType=TIMESTAMP}
    from dual where not exists
    (
    select 1 from users
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
    )
  </update>
  <insert id="batchUpsertSelective" parameterType="map">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
      @project https://github.com/itfsw/mybatis-generator-plugin
    -->
    insert into users (
    <foreach collection="selective" item="column" separator=",">
      ${column.escapedColumnName}
    </foreach>
    )
    values
    <foreach collection="list" item="item" separator=",">
      (
      <foreach collection="selective" item="column" separator=",">
        <if test="'id'.toString() == column.value">
          #{item.id,jdbcType=INTEGER}
        </if>
        <if test="'region'.toString() == column.value">
          #{item.region,jdbcType=VARCHAR}
        </if>
        <if test="'phone'.toString() == column.value">
          #{item.phone,jdbcType=VARCHAR}
        </if>
        <if test="'nickname'.toString() == column.value">
          #{item.nickname,jdbcType=VARCHAR}
        </if>
        <if test="'portraitUri'.toString() == column.value">
          #{item.portraitUri,jdbcType=VARCHAR}
        </if>
        <if test="'passwordHash'.toString() == column.value">
          #{item.passwordHash,jdbcType=CHAR}
        </if>
        <if test="'passwordSalt'.toString() == column.value">
          #{item.passwordSalt,jdbcType=CHAR}
        </if>
        <if test="'rongCloudToken'.toString() == column.value">
          #{item.rongCloudToken,jdbcType=VARCHAR}
        </if>
        <if test="'gender'.toString() == column.value">
          #{item.gender,jdbcType=VARCHAR}
        </if>
        <if test="'stAccount'.toString() == column.value">
          #{item.stAccount,jdbcType=VARCHAR}
        </if>
        <if test="'phoneVerify'.toString() == column.value">
          #{item.phoneVerify,jdbcType=INTEGER}
        </if>
        <if test="'stSearchVerify'.toString() == column.value">
          #{item.stSearchVerify,jdbcType=INTEGER}
        </if>
        <if test="'friVerify'.toString() == column.value">
          #{item.friVerify,jdbcType=INTEGER}
        </if>
        <if test="'groupVerify'.toString() == column.value">
          #{item.groupVerify,jdbcType=INTEGER}
        </if>
        <if test="'pokeStatus'.toString() == column.value">
          #{item.pokeStatus,jdbcType=INTEGER}
        </if>
        <if test="'groupCount'.toString() == column.value">
          #{item.groupCount,jdbcType=INTEGER}
        </if>
        <if test="'timestamp'.toString() == column.value">
          #{item.timestamp,jdbcType=BIGINT}
        </if>
        <if test="'createdAt'.toString() == column.value">
          #{item.createdAt,jdbcType=TIMESTAMP}
        </if>
        <if test="'updatedAt'.toString() == column.value">
          #{item.updatedAt,jdbcType=TIMESTAMP}
        </if>
        <if test="'deletedAt'.toString() == column.value">
          #{item.deletedAt,jdbcType=TIMESTAMP}
        </if>
      </foreach>
      )
    </foreach>
    on duplicate key update 
    <foreach collection="selective" item="column" separator=",">
      ${column.escapedColumnName} = values(${column.escapedColumnName})
    </foreach>
  </insert>
  <insert id="batchUpsert" parameterType="map">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
      @project https://github.com/itfsw/mybatis-generator-plugin
    -->
    insert into users
    (id, region, phone, nickname, portraitUri, passwordHash, passwordSalt, rongCloudToken, 
      gender, stAccount, phoneVerify, stSearchVerify, friVerify, groupVerify, pokeStatus, 
      groupCount, timestamp, createdAt, updatedAt, deletedAt)
    values
    <foreach collection="list" item="item" separator=",">
      (#{item.id,jdbcType=INTEGER}, #{item.region,jdbcType=VARCHAR}, #{item.phone,jdbcType=VARCHAR}, 
        #{item.nickname,jdbcType=VARCHAR}, #{item.portraitUri,jdbcType=VARCHAR}, #{item.passwordHash,jdbcType=CHAR}, 
        #{item.passwordSalt,jdbcType=CHAR}, #{item.rongCloudToken,jdbcType=VARCHAR}, #{item.gender,jdbcType=VARCHAR}, 
        #{item.stAccount,jdbcType=VARCHAR}, #{item.phoneVerify,jdbcType=INTEGER}, #{item.stSearchVerify,jdbcType=INTEGER}, 
        #{item.friVerify,jdbcType=INTEGER}, #{item.groupVerify,jdbcType=INTEGER}, #{item.pokeStatus,jdbcType=INTEGER}, 
        #{item.groupCount,jdbcType=INTEGER}, #{item.timestamp,jdbcType=BIGINT}, #{item.createdAt,jdbcType=TIMESTAMP}, 
        #{item.updatedAt,jdbcType=TIMESTAMP}, #{item.deletedAt,jdbcType=TIMESTAMP})
    </foreach>
    on duplicate key update 
    id = values(id),
    region = values(region),
    phone = values(phone),
    nickname = values(nickname),
    portraitUri = values(portraitUri),
    passwordHash = values(passwordHash),
    passwordSalt = values(passwordSalt),
    rongCloudToken = values(rongCloudToken),
    gender = values(gender),
    stAccount = values(stAccount),
    phoneVerify = values(phoneVerify),
    stSearchVerify = values(stSearchVerify),
    friVerify = values(friVerify),
    groupVerify = values(groupVerify),
    pokeStatus = values(pokeStatus),
    groupCount = values(groupCount),
    timestamp = values(timestamp),
    createdAt = values(createdAt),
    updatedAt = values(updatedAt),
    deletedAt = values(deletedAt)
  </insert>
</mapper>